#!/usr/bin/env bundle exec ruby

require 'docker-api'
require 'fileutils'
require 'optparse'
require 'pathname'
require 'tmpdir'

Dockerfile = Struct.new(:name, :lines)

tag = nil
OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options] PATH"

  opts.on '-tTAG', '--tag=TAG', 'Name and optionally a tag in the \'name:tag\' format' do |t|
    tag = t
  end
end.parse!

path = Pathname.new(ARGV[0]).expand_path
parent_dockerfile = (path / 'Dockerfile').readlines
dockerfiles = parent_dockerfile.slice_before(/^NAME /)
  .collect { |dockerfile|
    name_line, *lines = dockerfile
    name = name_line[5, name_line.length].strip
    Dockerfile.new(name, lines)
  }

dockerfiles.each do |dockerfile|
  Dir.mktmpdir do |dir|
    FileUtils.cp_r "#{path}/.", dir
    (Pathname.new(dir) / 'Dockerfile').write(dockerfile.lines.join)

    begin
      Docker::Image.build_from_dir(dir) do |v|
        log = JSON.parse(v)
        if log && log.has_key?('stream')
          puts log['stream']
        elsif log.has_key?('errorDetail')
          puts log['errorDetail']['message']
        end
      end
    rescue Docker::Error::UnexpectedResponseError
      exit 1
    end
  end
end
